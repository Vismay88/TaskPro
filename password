
//password for testing second letter cap for remember
// raJat123@
// vaibhav123
// vismay1234@
// hardik123@
// sandhya123@

const createUser = async (req, res, next) => {
  try {
    //Check user with that id is exist or not
    let userCheck = await User.findOne({ email: req.body.email });
    if (userCheck) {
      next(new AppError("User with this email id is already exist", 401));
    }
    //Passed all the Validator now create
    const user = new User({
      name: req.body.name,
      email: req.body.email,
      password: req.body.password,
      gender: req.body.gender,
    });
    // Check if there is a file attached in the request
    if (req.file) {
      const photo = new Photo({
        filename: req.file.filename,
        url: `http://localhost:3000/images/${req.file.filename}`,
        extension: req.file.mimetype.split("/")[1],
      });
      const savedPhoto = await photo.save();
      user.photo = savedPhoto._id;
    }
    const savedUser = await user.save();
    console.log(savedUser);
    //If User not saved
    if (!savedUser) {
      next(new AppError("Account not Created Please try again", 401));
    }
    res.status(201).json({
      message: "Your Account is Created Successfully",
      user: savedUser,
    });
  } catch (err) {
    next(globalErrorHandler(err));
  }
};


const multer = require("multer");
const path = require("path");
const User = require("../models/userModel");
const AppError = require("../utils/appError");

const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, "public/images");
  },
  filename: (req, file, cb) => {
    const ext = path.extname(file.originalname);
    cb(null, `user-${Date.now()}${ext}`);
  },
});

const upload = multer({
  storage,
  limits: {
    fileSize: 1024 * 1024 * 5, // 5MB
  },
  fileFilter: (req, file, cb) => {
    if (
      file.mimetype === "image/png" ||
      file.mimetype === "image/jpg" ||
      file.mimetype === "image/jpeg"
    ) {
      cb(null, true);
    } else {
      cb(new AppError("Only .png, .jpg and .jpeg formats allowed"), false);
    }
  },
});

exports.uploadPhoto = upload.single("photo");

exports.createUser = async (req, res, next) => {
  try {
    const userCheck = await User.findOne({ email: req.body.email });
    if (userCheck) {
      return next(new AppError("User with this email id already exists", 401));
    }

    const user = new User({
      name: req.body.name,
      email: req.body.email,
      password: req.body.password,
      gender: req.body.gender,
      photo: req.file ? `/images/${req.file.filename}` : "",
    });
    const savedUser = await user.save();
    console.log(savedUser);

    if (!savedUser) {
      return next(new AppError("Failed to create user", 500));
    }

    res.status(201).json({
      status: "success",
      message: "Your account has been created successfully",
      data: {
        user: savedUser,
      },
    });
  } catch (err) {
    console.log(err);
    next(err);
  }

//......................................................../////////////
const multer = require("multer");
const Photo = require("./../model/photoModel");
const AppError=require("./../Error/appError")

const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    if(!req.body.file){
      cb(new AppError("No profile photos is atteched here",400),false);
     }
    cb(null, "public/images");
  },
  filename: (req, file, cb) => {
    const extensionImage = file.mimetype.split("/")[1];
    console.log(extensionImage);
    cb(null, `${req.body.name}-${file.originalname}`);
  },
});
const multerFilter = (req,file, cb) => {  
  if (file.mimetype==="image/jpg" || file.mimetype==="image/png" ||file.mimetype==="image/jpeg" ) {
    cb(null, true);
  } 

  else {
    cb(new AppError("Not an image! please upload only jpg/jpeg/png images.", 400), false);
  }
};

const upload = multer({
   storage,
   fileFilter:multerFilter,
   limits:{fileSize:1000000}
  });

  /////////////////
  exports.uploadCsvFile = async (req, res, next) => {
    try {
      // Parse the CSV file using csv-parser
      const results = [];
      fs.createReadStream(req.file.path)
        .pipe(csv())
        .on('data', (data) => results.push(data))
        .on('end', async () => {
          // Create an object to hold the main tasks and subtasks separately
          const mainTasks = {};
          const subTasks = [];
  
          // Separate the main tasks and subtasks
          results.forEach((row, index) => {
            const task = {
              title: row.title,
              description: row.description,
              priority: row.priority,
              due_date: row.due_date,
              status: row.status,
              assign_to: row.assign_to,
              types: row.types,
            };
  
            if (task.types === 'main') {
              mainTasks[index] = task;
              console.log(".............................................")
              console.log("Main tasks:"+JSON.stringify(mainTasks));
              console.log(".............................................")
            } else {
              subTasks.push({ ...task, srno: row.srno });
              console.log(".............................................")
              console.log("subtask:"+JSON.stringify(subTasks)+" "+subTasks.srno);
            }
          });
  
          // Save the main tasks and get their IDs
          for (const [index, task] of Object.entries(mainTasks)) {
            const newTask = new Todo({
              title: task.title,
              description: task.description,
              priority: task.priority,
              due_date: task.due_date,
              status: task.status,
              assign_to: task.assign_to,
              types: task.types,
            });
            const savedTask = await newTask.save();
            mainTasks[index] = { ...task, id: savedTask._id }; // Store the task object with its id as well
          }
  
          // Assign the subtasks to their main tasks using the corresponding row number
          for (const subTask of subTasks) {
            const parentTask = mainTasks[subTask.srno-1]; // Get the main task object using its corresponding row number
            if (parentTask) {
              const newSubTask = new Todo({
                title: subTask.title,
                description: subTask.description,
                priority: subTask.priority,
                due_date: subTask.due_date,
                status: subTask.status,
                assign_to: subTask.assign_to,
                types: subTask.types,
                parent: parentTask.id, // Set the parent field to the main task's id
              });
  
              const savedSubTask = await newSubTask.save();
              parentTask.subtasks.push(savedSubTask); // Push the subtask object to the parent main task's subtasks array
              await Todo.updateOne({ _id: parentTask.id }, { subtasks: parentTask.subtasks }); // Update the parent main task's subtasks array in the database
            }
          }
  
          return res.status(201).json({
            message: 'Data saved successfully',
          });
        });
    } catch (error) {
      console.log(error);
      next(globalErrorHandler(error));
    }
  };